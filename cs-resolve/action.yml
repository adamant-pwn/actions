name: "oj-resolve"
description: "A composite action that competitive-verifier oj-resolve"
author: "Kzrnm"
branding:
  color: blue
  icon: target
inputs:
  solution:
    description: "The file path of solution."
    required: true
  output-path:
    description: "The file path of oj-resolve result json."
    required: true
    default: ${{runner.temp}}/verify-files.json
  include:
    description: "Argument of oj-resolve --include."
    required: false
    default: ""
  exclude:
    description: "Argument of oj-resolve --exclude."
    required: false
    default: ""
  unittest-result:
    description: "Specify unittest result csv path. Argument of oj-resolve --unittest."
    required: false
    default: ""
  problems:
    description: "output of CompetitiveVerifierProblem. Argument of oj-resolve --problems."
    required: false
    default: ""
  msbuild-properties:
    description: "MSBuild properties. Argument of oj-resolve --properties."
    required: false
    default: ""
  working-directory:
    description: Specifies the working directory where the command is run.
    required: false
outputs:
  json-path:
    description: "The path of verify files json."
    value: ${{ steps.path.outputs.json-path }}
runs:
  using: composite
  steps:
    - name: cs-resolve
      shell: bash
      id: resolve
      working-directory: ${{ inputs.working-directory  || '.' }}
      run: |
        set -f
        competitive-verifier-cs-resolver ${{inputs.solution}} \
          $(set +f && echo $COMPETITIVE_unittest) \
          $(set +f && echo $COMPETITIVE_problems) \
          $COMPETITIVE_include \
          $COMPETITIVE_exclude \
          $COMPETITIVE_msbuild_props \
          | tee "$COMPETITIVE_OUTPUT_FILE"
      env:
        COMPETITIVE_include: ${{ format(inputs.include && '--include {0}', inputs.include) }}
        COMPETITIVE_exclude: ${{ format(inputs.exclude && '--exclude {0}', inputs.exclude) }}
        COMPETITIVE_unittest: ${{ format(inputs.unittest-result && '--unittest {0}', inputs.unittest-result) }}
        COMPETITIVE_problems: ${{ format(inputs.problems && '--problems {0}', inputs.problems) }}
        COMPETITIVE_msbuild_props: ${{ format(inputs.msbuild-properties && '--properties {0}', inputs.msbuild-properties) }}
        COMPETITIVE_OUTPUT_FILE: ${{ inputs.output-path }}

    - name: Path
      id: path
      shell: pwsh
      run: |
        $output = (Get-Item "${{ inputs.output-path }}").FullName
        echo "json-path=$output" >> $env:GITHUB_OUTPUT
