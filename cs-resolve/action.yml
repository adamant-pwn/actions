name: "oj-resolve"
description: "A composite action that competitive-verifier oj-resolve"
author: "Kzrnm"
branding:
  color: blue
  icon: target
inputs:
  solution:
    description: "The file path of solution."
    required: true
  output-path:
    description: "The file path of oj-resolve result json."
    required: true
    default: ${{runner.temp}}/verify-files.json
  include:
    description: "Argument of oj-resolve --include."
    required: false
    default: ""
  exclude:
    description: "Argument of oj-resolve --exclude."
    required: false
    default: ""
  unittest-result:
    description: "Specify unittest result csv path. Argument of oj-resolve --unittest."
    required: false
    default: ""
  problems:
    description: "output of CompetitiveVerifierProblem. Argument of oj-resolve --problems."
    required: false
    default: ""
  msbuild-properties:
    description: "MSBuild properties. Argument of oj-resolve --properties."
    required: false
    default: ""
  working-directory:
    description: Specifies the working directory where the command is run.
    required: false
outputs:
  json-path:
    description: "The path of verify files json."
    value: ${{ steps.path.outputs.json-path }}
runs:
  using: composite
  steps:
    - name: cs-resolve
      shell: bash
      id: resolve
      working-directory: ${{inputs.working-directory}}
      run: |
        COMPETITIVE_unittest=(${{ inputs.unittest-result }})
        if test "${#COMPETITIVE_unittest[@]}" -ne 0; then
          COMPETITIVE_unittest=("--unittest" "${COMPETITIVE_unittest[@]}")
        fi
        COMPETITIVE_problems=(${{ inputs.problems }})
        if test "${#COMPETITIVE_problems[@]}" -ne 0; then
          COMPETITIVE_problems=("--problems" "${COMPETITIVE_problems[@]}")
        fi
        COMPETITIVE_msbuild_props=(${{ inputs.msbuild-properties }})
        if test "${#COMPETITIVE_msbuild_props[@]}" -ne 0; then
          COMPETITIVE_msbuild_props=("--properties" "${COMPETITIVE_msbuild_props[@]}")
        fi

        set -f
        COMPETITIVE_include=(${{ inputs.include }})
        if test "${#COMPETITIVE_include[@]}" -ne 0; then
          COMPETITIVE_include=("--include" "${COMPETITIVE_include[@]}")
        fi

        COMPETITIVE_exclude=(${{ inputs.exclude }})
        if test "${#COMPETITIVE_exclude[@]}" -ne 0; then
          COMPETITIVE_exclude=("--exclude" "${COMPETITIVE_exclude[@]}")
        fi

        competitive-verifier-cs-resolver ${{inputs.solution}} \
          "${COMPETITIVE_unittest[@]}" \
          "${COMPETITIVE_problems[@]}" \
          "${COMPETITIVE_include[@]}" \
          "${COMPETITIVE_exclude[@]}" \
          "${COMPETITIVE_msbuild_props[@]}" \
          | tee "$COMPETITIVE_OUTPUT_FILE"
      env:
        COMPETITIVE_OUTPUT_FILE: ${{ inputs.output-path }}

    - name: Path
      id: path
      shell: pwsh
      working-directory: ${{inputs.working-directory}}
      run: |
        $output = (Get-Item "${{ inputs.output-path }}").FullName
        echo "json-path=$output" >> $env:GITHUB_OUTPUT
